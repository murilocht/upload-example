{"ast":null,"code":"import _objectSpread from \"/home/murilocht/Documentos/projetos/reactjs/uploadexample/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/murilocht/Documentos/projetos/reactjs/uploadexample/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport { uniqueId } from 'lodash';\nimport filesize from 'filesize';\nimport GlobalStyle from './styles/global';\nimport { Container, Content } from './styles';\nimport api from './services/api';\nimport Upload from './components/Upload';\nimport FileList from './components/FileList';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      uploadedFiles: []\n    };\n\n    this.handleUpload = files => {\n      const uploadedFiles = files.map(file => ({\n        file,\n        id: uniqueId(),\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: URL.createObjectURL(file),\n        progress: 0,\n        uploaded: false,\n        url: null\n      }));\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\n      });\n      uploadedFiles.forEach(this.processUpload);\n    };\n\n    this.updateFile = (id, data) => {\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.map(uploadedFile => {\n          return id === uploadedFile.id ? _objectSpread({}, uploadedFile, {}, data) : uploadedFile;\n        })\n      });\n    };\n\n    this.processUpload = uploadedFile => {\n      const data = new FormData();\n      data.append('file', uploadedFile.file, uploadedFile.name);\n      api.post('posts', data, {\n        onUploadProgress: e => {\n          const progress = parseInt(Math.round(e.loaded * 100 / e.total));\n          this.updateFile(uploadedFile.id, {\n            progress\n          });\n        }\n      }).then(response => {\n        this.updateFile(uploadedFile.id, {\n          uploaded: true,\n          id: response.data._id,\n          url: response.data.url\n        });\n      }).catch(() => {\n        this.updateFile(uploadedFile.id, {\n          error: true\n        });\n      });\n    };\n\n    this.handleDelete = async id => {\n      await api.delete(`posts/${id}`);\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.filter(file => file.id !== id)\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const response = await api.get('posts');\n    this.setState({\n      uploadedFiles: response.data.map(file => ({\n        id: uniqueId(),\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: file.url,\n        uploaded: true,\n        url: file.url\n      }))\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\n  }\n\n  render() {\n    const uploadedFiles = this.state.uploadedFiles;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Upload, {\n      onUpload: this.handleUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), !!uploadedFiles.length && React.createElement(FileList, {\n      files: uploadedFiles,\n      onDelete: this.handleDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(GlobalStyle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/murilocht/Documentos/projetos/reactjs/uploadexample/frontend/src/App.js"],"names":["React","Component","uniqueId","filesize","GlobalStyle","Container","Content","api","Upload","FileList","App","state","uploadedFiles","handleUpload","files","map","file","id","name","readableSize","size","preview","URL","createObjectURL","progress","uploaded","url","setState","concat","forEach","processUpload","updateFile","data","uploadedFile","FormData","append","post","onUploadProgress","e","parseInt","Math","round","loaded","total","then","response","_id","catch","error","handleDelete","delete","filter","componentDidMount","get","componentWillUnmount","revokeObjectURL","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { uniqueId } from 'lodash';\nimport filesize from 'filesize';\n\nimport GlobalStyle from './styles/global';\nimport { Container, Content } from './styles';\nimport api from './services/api';\n\nimport Upload from './components/Upload';\nimport FileList from './components/FileList';\n\nclass App extends Component {\n  state = {\n    uploadedFiles: []\n  };\n\n  async componentDidMount() {\n    const response = await api.get('posts');\n\n    this.setState({\n      uploadedFiles: response.data.map(file => ({\n        id: uniqueId(),\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: file.url,\n        uploaded: true,\n        url: file.url\n      }))\n    });\n  }\n\n  handleUpload = files => {\n    const uploadedFiles = files.map(file => ({\n      file,\n      id: uniqueId(),\n      name: file.name,\n      readableSize: filesize(file.size),\n      preview: URL.createObjectURL(file),\n      progress: 0,\n      uploaded: false,\n      url: null\n    }))\n\n    this.setState({\n      uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\n    });\n\n    uploadedFiles.forEach(this.processUpload)\n  };\n\n  updateFile = (id, data) => {\n    this.setState({ uploadedFiles: this.state.uploadedFiles.map(uploadedFile => {\n      return id === uploadedFile.id ? { ...uploadedFile, ...data } : uploadedFile;\n    }) })\n  };\n\n  processUpload = (uploadedFile) => {\n    const data = new FormData();\n\n    data.append('file', uploadedFile.file, uploadedFile.name);\n\n    api.post('posts', data,  {\n      onUploadProgress: e => {\n        const progress = parseInt(Math.round((e.loaded * 100) / e.total));\n\n        this.updateFile(uploadedFile.id, {\n          progress\n        });\n      } \n    }).then(response => {\n      this.updateFile(uploadedFile.id, {\n        uploaded: true,\n        id: response.data._id,\n        url: response.data.url\n      });\n    }).catch(() => {\n      this.updateFile(uploadedFile.id, {\n        error: true\n      });\n    });\n  };\n\n  handleDelete = async id => {\n    await api.delete(`posts/${id}`);\n\n    this.setState({\n      uploadedFiles: this.state.uploadedFiles.filter(file => file.id !== id)\n    });\n  };\n\n  componentWillUnmount() {\n    this.state.uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\n  }\n\n  render() {\n    const { uploadedFiles } = this.state;\n\n    return (\n      <Container>\n        <Content>\n          <Upload onUpload={this.handleUpload}/>\n          { !!uploadedFiles.length && (\n            <FileList files={uploadedFiles} onDelete={this.handleDelete} />\n          ) } \n        </Content>\n\n        <GlobalStyle />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}